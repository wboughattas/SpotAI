import axios from 'axios'

export default async function createPlaylist(
   sliderValues,
   settings,
   setIsLoading,
   selectedSliders,
   token,
   setPlaylists
) {
   let requestURL = 'http://127.0.0.1:5001/recommend_tracks/?'
   for (let index = 1; index < sliderValues.length; index++) {
      const { step, key } = settings[index]
      requestURL += selectedSliders.includes(key)
         ? `${key}=${
              step
                 ? sliderValues[index]
                 : ((1.0 * sliderValues[index]) / 100).toFixed(3)
           }&`
         : ''
   }
   requestURL += `${settings[0].key[0]}=${sliderValues[0][0]}&${settings[0].key[1]}=${sliderValues[0][1]}`
   let { res: tracks } = await fetch(requestURL)
      .then((res) => {
         setIsLoading(false)
         return res.json()
      })
      .catch((err) => console.error(err))

   const { data: user } = await axios.get('https://api.spotify.com/v1/me/', {
      headers: {
         Accept: 'application/json',
         Authorization: `Bearer ${token}`,
         'Content-Type': 'application/json',
      },
   })

   const playlist = await axios.post(
      `https://api.spotify.com/v1/users/${user.id}/playlists`,
      {
         name: `SpotAI Playlist ${Math.round(Math.random() * 1000000)} `,
         description: 'A playlist generated by SpotAI',
      },
      {
         headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
         },
      }
   )

   console.log(playlist.data.id)

   await axios.post(
      `https://api.spotify.com/v1/playlists/${playlist.data.id}/tracks`,
      {
         uris: tracks.map((track) => `spotify:track:${track}`),
      },
      {
         headers: {
            Accept: 'application/json',
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
         },
      }
   )

   const { data } = await axios.get('https://api.spotify.com/v1/me/playlists', {
      headers: {
         Accept: 'application/json',
         Authorization: `Bearer ${token}`,
         'Content-Type': 'application/json',
      },
      params: { limit: 50, offset: 0 },
   })
   setPlaylists({ data }.data.items)
}
